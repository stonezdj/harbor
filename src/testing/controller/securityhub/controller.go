// Code generated by mockery v2.22.1. DO NOT EDIT.

package securityhub

import (
	context "context"

	model "github.com/goharbor/harbor/src/pkg/securityhub/model"
	mock "github.com/stretchr/testify/mock"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// SecuritySummary provides a mock function with given fields: ctx, projectID, withCVE, withArtifact
func (_m *Controller) SecuritySummary(ctx context.Context, projectID int64, withCVE bool, withArtifact bool) (*model.Summary, error) {
	ret := _m.Called(ctx, projectID, withCVE, withArtifact)

	var r0 *model.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool, bool) (*model.Summary, error)); ok {
		return rf(ctx, projectID, withCVE, withArtifact)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool, bool) *model.Summary); ok {
		r0 = rf(ctx, projectID, withCVE, withArtifact)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, bool, bool) error); ok {
		r1 = rf(ctx, projectID, withCVE, withArtifact)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewController interface {
	mock.TestingT
	Cleanup(func())
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewController(t mockConstructorTestingTNewController) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
